# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

jobs:
  build:
    parameters:
      docker_image:
        type: string
        default: ""
    docker:
      # Reference: https://circleci.com/docs/2.0/circleci-images/
      - image: << parameters.docker_image >>

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      WGRIB: /home/circleci/repo/wgrib

    steps:
      - checkout

      # Print some diagnostic info
      - run:
          name: Print diagnostic info
          command: |
              echo $(cat /etc/os-release)
              echo $(java -version)

      # Compute checksum of test resources
      - run:
          name: Compute checksum of test resources
          command: |
              resources_checksum=($(find src/test/resources -type f -exec md5sum {} \; | sort -k 2 | md5sum))
              echo Checksum of src/test/resources: $resources_checksum
              echo $resources_checksum > RESOURCES_MD5

      # Download and cache dependencies
      - restore_cache:
          name: Restore Gradle from cache
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - run:
            name: Install Git LFS
            command: |
                curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
                sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138
                sudo apt-get update
                sudo apt-get install libcrypt1 || [[ $? -eq 100 ]]
                sudo apt-get install git-lfs

      - restore_cache:
          name: Restore Git LFS files from cache
          keys:
            - git-lfs-cache-{{ checksum "RESOURCES_MD5" }}
            - git-lfs-cache-

      - run:
            name: Pull Git LFS files
            command: |
                git lfs install
                git lfs pull

      # Download additional GRIB files from Dropbox
      - run:
          name: "Download GRIB files from Dropbox"
          environment:
            RES_DIR: src/test/resources
          command: |
            wget --output-document=${RES_DIR}/fh.000_tl.press_ar.octanti "https://www.dropbox.com/s/u32knq1pjm7cq60/fh.000_tl.press_ar.octanti?dl=1"
            wget --output-document=${RES_DIR}/issue22.grb "https://www.dropbox.com/scl/fi/o9o79d6snz9j8ige91ezh/issue22.grb?rlkey=y9jxro8eqvkt1kd7kil0i1xb7&st=wznfrhvy&dl=1"

      # Cache Git LFS files
      - save_cache:
            name: Cache Git LFS files
            key: git-lfs-cache-{{ checksum "RESOURCES_MD5" }}
            paths:
              - .git/lfs/objects

      - save_cache:
          name: Cache Gradle
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - restore_cache:
          name: Restore wgrib from cache
          keys:
            - v2-wgrib-cache

      # Download and install wgrib
      - run:
            name: Install wgrib
            command: |
                if [ ! -f "$WGRIB" ]; then
                    sudo apt install gcc
                    wget ftp://ftp.cpc.ncep.noaa.gov/wd51we/wgrib/wgrib.c
                    gcc --version
                    gcc wgrib.c -o wgrib
                fi
                # Print out wgrib version (note: running wgrib without arguments makes it return code 8)
                $WGRIB || [[ $? -eq 8 ]]

      # Cache wgrib binary
      - save_cache:
          name: Cache wgrib
          paths: /home/circleci/repo/wgrib
          key: v2-wgrib-cache

      # run tests!
      - run: gradle test

      - run:
            name: Save test results
            command: |
                mkdir -p ~/test-results/junit/
                find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
                mkdir -p ~/test-results/junit/report/
                cp -r build/reports/tests/test ~/test-results/junit/report/
            when: always
      - store_test_results:
            path: ~/test-results
      - store_artifacts:
            path: ~/test-results/junit

      # Deploy application as JAR
      - run:
            name: Deploy Application
            command: |
                gradle jar
      - store_artifacts:
            path: build/libs

workflows:
  version: 2
  workflow:
    jobs:
      - build:
          matrix:
            parameters:
              docker_image: ["cimg/openjdk:8.0", "cimg/openjdk:11.0"]
